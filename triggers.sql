


/* ESTRUTURA DE UMA TRIGGER */

-- PRIMEIRO MUDAR O DELIMITADOR --

CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH ROW (PARA CADA LINHA)
BEGIN -> INICIO 

		QUALQUER COMANDO SQL

END -> FIM

CREATE DATABASE AULA40;

USE AULA40;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(100)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

-- CRIANDO A TRIGGER DO BACKUP--

DELIMITER $

CREATE TRIGGER BACKUP_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
BEGIN 

	INSERT INTO BKP_USUARIO VALUES
	(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);	

END
$

INSERT INTO USUARIO VALUES(NULL,'RENAN','RENAN2910','MINHASENHA');

SELECT * FROM USUARIO;

DELETE FROM USUARIO WHERE IDUSUARIO = 1;

/* COMUNICACAO ENTRE BANCOS DE DADOS */

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

-- -- -- --

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);

SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $

-- CRIANDO A TRIGGER DO INSERT --

CREATE TRIGGER BACKUP_PRODUTO
BEFORE INSERT ON PRODUTO 
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR,'I');

END
$

-- -- -- -- 

DELIMITER ;

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',59.90);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL',90.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO PYTON',100.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO de TESTE',60.25);

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

-- CRIANDO A TRIGGER DO DELETE --

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO 
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR);

END
$

DELETE FROM PRODUTO WHERE IDPRODUTO = 2;

DROP TRIGGER BACKUP_PRODUTO;

CREATE TRIGGER BACKUP_PRODUTO
AFTER INSERT ON PRODUTO 
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);

END
$

-- INDICANDO SE FOI PRO BACKUP ATRAVES DE DELETE OU INSERT --

ALTER TABLE BACKUP.BKP_PRODUTO
ADD EVENTO CHAR(1);

DROP TRIGGER BACKUP_PRODUTO_DEL;

CREATE TRIGGER BACKUP_PRODUTO_DEL
BEFORE DELETE ON PRODUTO 
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,'D');

END
$

DELETE FROM PRODUTO WHERE IDPRODUTO = 4;

SELECT * FROM BACKUP.BKP_PRODUTO;

/* TRIGGER DE AUDITORIA */

DROP DATABASE LOJA;
DROP DATABASE BACKUP;

CREATE DATABASE LOJA;

USE LOJA;

CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',59.90);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL',90.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO PYTON',100.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO de TESTE',60.25);


SELECT NOW(); -- QUANDO 
SELECT CURRENT_USER(); -- QUEM 

CREATE DATABASE BACKUP;

USE BACKUP;

CREATE TABLE BKP_PRODUTO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
);

USE LOJA;

INSERT INTO PRODUTO VALUES(NULL,'LIVRO MODELAGEM',50.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO BI',59.90);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO SQL',90.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO PYTON',100.00);
INSERT INTO PRODUTO VALUES(NULL,'LIVRO de TESTE',60.25);


CREATE TRIGGER AUDIT_PROD
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN

	INSERT INTO BACKUP.BKP_PRODUTO VALUES
	(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,
	NEW.VALOR,NOW(),CURRENT_USER(),'U');

END
$


UPDATE PRODUTO SET VALOR = 150.00
WHERE IDPRODUTO = 4;

SELECT * FROM PRODUTO;

SELECT * FROM BACKUP.BKP_PRODUTO;

/* AULA 44 - AUTORRELACIONAMENTO */  

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	HORAS INT,
	VALOR FLOAT(10,2),
	ID_PREREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_PREREQ
FOREIGN KEY(ID_PREREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES(NULL,'BD RELACIONAL',20,400.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'BUSINESS INTELIGENCE',74,860.99,1);
INSERT INTO CURSOS VALUES(NULL,'RELATORIOS AVANCADOS',32,100.00,2);
INSERT INTO CURSOS VALUES(NULL,'LOGICA PROGRAMACAO',40,680.00,NULL);
INSERT INTO CURSOS VALUES(NULL,'JAVA SCRIPT',18.100,00,4);

SELECT * FROM CURSOS;

SELECT NOME, VALOR, HORAS, IFNULL(ID_PREREQ,'SEM REQ') REQUISITO
FROM CURSOS;

/* NOME, VALOR, HORAS E NOME DO PRE REQUISITO */

SELECT C.NOME AS CURSO, 
	   C.VALOR AS VALOR, 
	   C.HORAS CARGA_HORARIA, 
	   IFNULL(P.NOME, '---') AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.ID_PREREQ;